- name: Docker
  hosts: 127.0.0.1
  connection: local

  vars:
    docker_distribution: "{{ 'ubuntu' if ansible_distribution == 'Pop!_OS' else ansible_distribution | lower }}"
    is_mac: "{{ ansible_distribution == 'MacOSX' }}"
    is_ubuntu: "{{ ansible_distribution == 'Ubuntu' or ansible_distribution == 'Pop!_OS' }}"
    machine_arch: "{{ 'Darwin-x86_64' if is_mac else 'Linux-x86_64' }}"

  tasks:
    - set_fact: is_wsl={{ not is_mac and lookup('file', '/proc/version') is regex('(M|m)icrosoft') }}

    # Linux

    - name: Install Docker pre-requisites
      become: yes
      apt:
        package: gnupg-agent
      when: not is_mac

    - name: Determine Docker Compose latest version
      shell:
        cmd: "curl -s https://api.github.com/repos/docker/compose/releases/latest | grep \"browser_download_url.*Linux-x86_64\\\"\" | cut -d : -f 2,3 | tr -d \\\""
        warn: false
      register: docker_compose_version
      when: not is_mac

    - name: Install Docker Compose (Linux)
      become: yes
      get_url:
        url: "{{ docker_compose_version.stdout }}"
        dest: /usr/local/bin/docker-compose
        mode: 0755
      when: not is_mac

    - name: Add Docker APT package key
      become: yes
      apt_key:
        url: https://download.docker.com/linux/{{ docker_distribution }}/gpg
      when: not is_mac

    - name: Add Docker APT package repository
      become: yes
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/{{ docker_distribution }} {{ ansible_distribution_release }} stable
        filename: docker
        update_cache: no
      register: apt_repository_docker
      when: not is_mac

    - name: Update APT package list
      become: yes
      apt:
        update_cache: yes
      when: apt_repository_docker.changed
      register: apt_update
      retries: 5
      until: apt_update is success

    - name: Install Docker engine (Linux)
      become: yes
      apt:
        package: "{{ item }}"
      loop:
        - docker-ce
        - docker-ce-cli
      when: not is_mac

    - name: Add Docker startup on WSL boot
      blockinfile:
        path: ~/.bashrc
        marker: "### {mark} Ansible managed: Docker startup"
        block: |
          [ -S /var/run/docker.sock ] || sudo service docker start
      when: is_wsl

    - name: Enable Docker engine for current user
      become: yes
      user:
        name={{ lookup('env', "USER") }}
        groups=docker
        append=yes
      when: not is_mac

    # Linux (Ubuntu)

    - name: Add Mesa package source
      become: yes
      apt_repository:
        repo: ppa:kisak/kisak-mesa
      register: apt_repository_mesa
      when: is_ubuntu

    - name: Update APT package list
      become: yes
      apt:
        update_cache: yes
      when: is_ubuntu and apt_repository_mesa.changed
      register: apt_update
      retries: 5
      until: apt_update is success

    - name: Install Mesa libraries and utilities
      become: yes
      apt:
        package: "{{ item }}"
      loop:
        - libglapi-mesa
        - libglx-mesa0
        - mesa-utils
      when: is_ubuntu

    - name: Get distribution ID
      shell: ". /etc/os-release; echo ${ID}${VERSION_ID}"
      register: distro_id
      when: is_ubuntu

    - name: Add NVIDIA container runtime APT package key
      become: yes
      apt_key:
        url: https://nvidia.github.io/nvidia-container-runtime/gpgkey
      when: is_ubuntu

    - name: Add NVIDIA container runtime APT package source
      become: yes
      get_url:
        dest: /etc/apt/sources.list.d/nvidia-container-runtime.list
        url: https://nvidia.github.io/nvidia-container-runtime/{{ distro_id.stdout }}/nvidia-container-runtime.list
      register: apt_repository_nvidia
      when: is_ubuntu

    - name: Update APT package list
      become: yes
      apt:
        update_cache: yes
      when: is_ubuntu and apt_repository_nvidia.changed
      register: apt_update
      retries: 5
      until: apt_update is success

    - name: Install NVIDIA container runtime
      become: yes
      apt:
        package: nvidia-container-runtime
      when: is_ubuntu

    # macOS

    - name: Install Docker Compose (macOS)
      homebrew:
        name: docker-compose
      when: is_mac

    - name: Install Docker engine (macOS)
      homebrew_cask:
        name: docker
      when: is_mac

    # Common

    - name: Determine Docker Machine latest version
      shell:
        cmd: "curl -s https://api.github.com/repos/docker/machine/releases/latest | grep \"browser_download_url.*{{ machine_arch }}\\\"\" | cut -d : -f 2,3 | tr -d \\\""
        warn: false
      register: docker_machine_version

    - name: Install Docker Machine
      become: yes
      get_url:
        url: "{{ docker_machine_version.stdout }}"
        dest: /usr/local/bin/docker-machine
        mode: 0755
    
    - name: Update environment for WSL
      blockinfile:
        path: ~/.bashrc
        marker: "### {mark} Ansible managed: Use the windows desktop docker daemon tcp socket"
        block: |
          export DOCKER_HOST=tcp://localhost:2375
      when: is_wsl
